{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"dep",
				"deprecated_function"
			],
			[
				"item",
				"item"
			],
			[
				"Err",
				"Erroneous"
			],
			[
				"dyn_",
				"dyn_trait_send"
			],
			[
				"Ex",
				"ExistentialPredicate"
			],
			[
				"dedu",
				"dedup_by"
			],
			[
				"takes_dyn",
				"takes_dyn_trait_send_sendalias"
			],
			[
				"refcell",
				"refcell_replace_swap"
			],
			[
				"error_numb",
				"error_number_raw"
			],
			[
				"is_C",
				"is_cyclic_node"
			],
			[
				"tar",
				"target_idx"
			],
			[
				"loop",
				"loop_block_ast_ids"
			],
			[
				"loop_bl",
				"loop_block_cfgs"
			],
			[
				"loop_block",
				"loop_block_ast_id"
			],
			[
				"cfg_",
				"cfg_node_ast_id"
			],
			[
				"loop_block_",
				"loop_block_ast_ids"
			],
			[
				"iteration",
				"iteration_recur_count"
			],
			[
				"ExprAs",
				"ExprAssignOp"
			],
			[
				"va",
				"value_expr"
			],
			[
				"of_",
				"of_expr"
			],
			[
				"mat",
				"match_arms"
			],
			[
				"of_e",
				"of_expr"
			],
			[
				"of_ex",
				"of_exprs"
			],
			[
				"pre",
				"predicate_expr"
			],
			[
				"ele",
				"element_exprs"
			],
			[
				"cons",
				"consequent_block"
			],
			[
				"Loo",
				"LoopBehaviour"
			],
			[
				"Stm",
				"StmtDecl"
			],
			[
				"expr_",
				"expr_unconditionally_exits_loop"
			],
			[
				"inn",
				"inner_expr"
			],
			[
				"Stmt",
				"StmtExpr"
			],
			[
				"span_s",
				"span_single_loop_iteration_lint"
			],
			[
				"SINGLE",
				"LOOP_SINGLE_ITERATION"
			],
			[
				"span_",
				"span_lint"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/havvy/.nixpkgs/shell/rust.nix",
			"settings":
			{
				"buffer_size": 832,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/scratchspace/rustc-build-logs/2018-05-25-01.log",
			"settings":
			{
				"buffer_size": 706851,
				"encoding": "UTF-8",
				"line_ending": "CR"
			}
		},
		{
			"file": "/home/havvy/scratchspace/ty-dynamic.search",
			"settings":
			{
				"buffer_size": 8045,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/workspace/rust/project/src/libsyntax_pos/symbol.rs",
			"settings":
			{
				"buffer_size": 21861,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/workspace/rust/project/src/libproc_macro/lib.rs",
			"settings":
			{
				"buffer_size": 53070,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/workspace/rust/project/config.toml",
			"settings":
			{
				"buffer_size": 18449,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/workspace/rust/project/src/librustc_typeck/astconv.rs",
			"settings":
			{
				"buffer_size": 60852,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/workspace/rust/project/src/librustc/ty/sty.rs",
			"settings":
			{
				"buffer_size": 70063,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/workspace/rust/project/src/libsyntax/diagnostic_list.rs",
			"settings":
			{
				"buffer_size": 9602,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/workspace/rust/project/src/libsyntax/attr.rs",
			"settings":
			{
				"buffer_size": 53788,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/workspace/rust/project/src/librustc/ty/context.rs",
			"settings":
			{
				"buffer_size": 104892,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/workspace/rust/project/src/test/run-pass/trait-object-auto-dedup.rs",
			"settings":
			{
				"buffer_size": 1961,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/workspace/rust/project/src/test/ui/trait-object-auto-dedup-in-impl.rs",
			"settings":
			{
				"buffer_size": 895,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/workspace/rust/project/src/test/ui/trait-object-auto-dedup-in-impl.stderr",
			"settings":
			{
				"buffer_size": 511,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// astconv.rs#621\n// \n    fn conv_object_ty_poly_trait_ref(&self,\n        span: Span,\n        trait_bounds: &[hir::PolyTraitRef],\n        lifetime: &hir::Lifetime)\n        -> Ty<'tcx>\n    {\n        let tcx = self.tcx();\n\n        if trait_bounds.is_empty() {\n            span_err!(tcx.sess, span, E0224,\n                      \"at least one non-builtin trait is required for an object type\");\n            return tcx.types.err;\n        }\n\n        let mut projection_bounds = vec![];\n        let dummy_self = tcx.mk_ty(TRAIT_OBJECT_DUMMY_SELF);\n        let principal = self.instantiate_poly_trait_ref(&trait_bounds[0],\n                                                        dummy_self,\n                                                        &mut projection_bounds);\n\n        for trait_bound in trait_bounds[1..].iter() {\n            // Sanity check for non-principal trait bounds\n            self.instantiate_poly_trait_ref(trait_bound,\n                                            dummy_self,\n                                            &mut vec![]);\n        }\n\n        let (auto_traits, trait_bounds) = split_auto_traits(tcx, &trait_bounds[1..]);\n\n        if !trait_bounds.is_empty() {\n            let b = &trait_bounds[0];\n            let span = b.trait_ref.path.span;\n            struct_span_err!(self.tcx().sess, span, E0225,\n                \"only auto traits can be used as additional traits in a trait object\")\n                .span_label(span, \"non-auto additional trait\")\n                .emit();\n        }\n\n        // Erase the dummy_self (TRAIT_OBJECT_DUMMY_SELF) used above.\n        let existential_principal = principal.map_bound(|trait_ref| {\n            self.trait_ref_to_existential(trait_ref)\n        });\n        let existential_projections = projection_bounds.iter().map(|bound| {\n            bound.map_bound(|b| {\n                let trait_ref = self.trait_ref_to_existential(b.projection_ty.trait_ref(tcx));\n                ty::ExistentialProjection {\n                    ty: b.ty,\n                    item_def_id: b.projection_ty.item_def_id,\n                    substs: trait_ref.substs,\n                }\n            })\n        });\n\n        // check that there are no gross object safety violations,\n        // most importantly, that the supertraits don't contain Self,\n        // to avoid ICE-s.\n        let object_safety_violations =\n            tcx.astconv_object_safety_violations(principal.def_id());\n        if !object_safety_violations.is_empty() {\n            tcx.report_object_safety_error(\n                span, principal.def_id(), object_safety_violations)\n                .emit();\n            return tcx.types.err;\n        }\n\n        let mut associated_types = FxHashSet::default();\n        for tr in traits::supertraits(tcx, principal) {\n            associated_types.extend(tcx.associated_items(tr.def_id())\n                .filter(|item| item.kind == ty::AssociatedKind::Type)\n                .map(|item| item.def_id));\n        }\n\n        for projection_bound in &projection_bounds {\n            associated_types.remove(&projection_bound.projection_def_id());\n        }\n\n        for item_def_id in associated_types {\n            let assoc_item = tcx.associated_item(item_def_id);\n            let trait_def_id = assoc_item.container.id();\n            struct_span_err!(tcx.sess, span, E0191,\n                \"the value of the associated type `{}` (from the trait `{}`) must be specified\",\n                        assoc_item.name,\n                        tcx.item_path_str(trait_def_id))\n                        .span_label(span, format!(\n                            \"missing associated type `{}` value\", assoc_item.name))\n                        .emit();\n        }\n\n        // skip_binder is okay, because the predicates are re-bound.\n        let mut v =\n            iter::once(ty::ExistentialPredicate::Trait(*existential_principal.skip_binder()))\n            .chain(auto_traits.into_iter().map(ty::ExistentialPredicate::AutoTrait))\n            .chain(existential_projections\n                   .map(|x| ty::ExistentialPredicate::Projection(*x.skip_binder())))\n            .collect::<AccumulateVec<[_; 8]>>();\n        v.sort_by(|a, b| a.cmp(tcx, b));\n        v.dedup_by(|a, b| a.cmp(tcx, b));\n        let existential_predicates = ty::Binder::bind(tcx.mk_existential_predicates(v.into_iter()));\n\n\n        // Explicitly specified region bound. Use that.\n        let region_bound = if !lifetime.is_elided() {\n            self.ast_region_to_region(lifetime, None)\n        } else {\n            self.compute_object_lifetime_bound(span, existential_predicates).unwrap_or_else(|| {\n                let hir_id = tcx.hir.node_to_hir_id(lifetime.id);\n                if tcx.named_region(hir_id).is_some() {\n                    self.ast_region_to_region(lifetime, None)\n                } else {\n                    self.re_infer(span, None).unwrap_or_else(|| {\n                        span_err!(tcx.sess, span, E0228,\n                                  \"the lifetime bound for this object type cannot be deduced \\\n                                   from context; please supply an explicit bound\");\n                        tcx.types.re_static\n                    })\n                }\n            })\n        };\n\n        debug!(\"region_bound: {:?}\", region_bound);\n\n        let ty = tcx.mk_dynamic(existential_predicates, region_bound);\n        debug!(\"trait_object_type: {:?}\", ty);\n        ty\n    }",
			"settings":
			{
				"buffer_size": 5417,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/workspace/rust/project/src/test/ui-fulldeps/invalid-punct-ident-1.rs",
			"settings":
			{
				"buffer_size": 600,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/havvy/workspace/rust/project/src/test/ui-fulldeps/auxiliary/invalid-punct-ident.rs",
			"settings":
			{
				"buffer_size": 1144,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 92.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"JSON",
				"JSON Reindent: reindent file or selection"
			],
			[
				"JS",
				"JSON Reindent: reindent file or selection"
			],
			[
				"Package Control: I",
				"Package Control: Install Package"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 370.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			" import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/havvy/workspace/rust/project",
		"/home/havvy/workspace/rust/project/src",
		"/home/havvy/workspace/rust/project/src/librustc",
		"/home/havvy/workspace/rust/project/src/libsyntax",
		"/home/havvy/workspace/rust/project/src/test",
		"/home/havvy/workspace/rust/project/src/test/ui",
		"/home/havvy/workspace/rust/project/src/test/ui/type-check"
	],
	"file_history":
	[
		"/home/havvy/workspace/rust/project/src/test/run-pass/rfc-2421-unreserve-pure-offsetof-sizeof-alignof.rs",
		"/home/havvy/workspace/rust/project/src/test/run-pass/trait-object-auto-dedup-in-impl.rs",
		"/home/havvy/workspace/rust/project/src/test/parse-fail/removed-syntax-fn-pure.rs",
		"/home/havvy/workspace/rust/project/src/libcore/option.rs",
		"/home/havvy/workspace/rust/project/src/libcore/mem.rs",
		"/home/havvy/workspace/rust/project/src/libcore/cell.rs",
		"/home/havvy/workspace/rust/project/src/libcore/macros.rs",
		"/home/havvy/workspace/rust/project/src/libstd/macros.rs",
		"/home/havvy/workspace/rust/project/build/x86_64-unknown-linux-gnu/llvm/build/CMakeFiles/CMakeTmp/a.c",
		"/home/havvy/workspace/rust/project/build/x86_64-unknown-linux-gnu/llvm/build/LLVMBuild.cmake",
		"/home/havvy/workspace/rust/project/build/x86_64-unknown-linux-gnu/llvm/build/cmake_install.cmake",
		"/home/havvy/scratchspace/rust-build.log",
		"/home/havvy/workspace/rust/project/src/doc/unstable-book/src/language-features/lang-items.md",
		"/home/havvy/scratchspace/test-stage1-04.txt",
		"/home/havvy/scratchspace/test-stage1-05.txt",
		"/home/havvy/scratchspace/test-stage1.txt",
		"/home/havvy/scratchspace/test-stage1-03.txt",
		"/home/havvy/workspace/rust/project/build/x86_64-unknown-linux-gnu/llvm/build/CMakeFiles/CMakeError.log",
		"/home/havvy/workspace/rust/project/build/x86_64-unknown-linux-gnu/llvm/build/CMakeFiles/CMakeOutput.log",
		"/home/havvy/workspace/rust/project/src/doc/unstable-book/src/the-unstable-book.md",
		"/home/havvy/workspace/rust/project/src/rtstartup/rsbegin.rs",
		"/home/havvy/workspace/rust/project/src/rtstartup/rsend.rs",
		"/home/havvy/workspace/rust/project/src/libcore/ops/unsize.rs",
		"/home/havvy/workspace/rust/project/src/libcore/ptr.rs",
		"/home/havvy/workspace/rust/project/src/libcore/marker.rs",
		"/home/havvy/workspace/rust/project/src/liblibc/src/dox.rs",
		"/home/havvy/workspace/rust/project/src/test/run-pass/impl-inherent-non-conflict.rs",
		"/home/havvy/workspace/rust/project/src/test/run-pass/impl-implicit-trait.rs",
		"/home/havvy/workspace/rust/project/lang.txt",
		"/home/havvy/workspace/tennu/framework/node_modules/after-events/after-events.js",
		"/home/havvy/workspace/tennu/framework/src/test/plugin-channel.sjs",
		"/home/havvy/workspace/tennu/framework/src/test/plugin-action.sjs",
		"/home/havvy/workspace/tennu/framework/src/test/message.sjs",
		"/home/havvy/workspace/tennu/framework/src/test/client.sjs",
		"/home/havvy/workspace/tennu/framework/tennu_plugins/ctcp.js",
		"/home/havvy/workspace/tennu/hresult.json",
		"/home/havvy/workspace/gald/apps/gald/critical.js",
		"/home/havvy/workspace/clippy/clippy_lints/src/utils/mod.rs",
		"/home/havvy/workspace/clippy/clippy_lints/Cargo.toml",
		"/home/havvy/workspace/clippy/clippy_lints/src/doc.rs",
		"/home/havvy/workspace/clippy/tests/compile-fail/unused_labels.rs",
		"/home/havvy/workspace/clippy/tests/compile-fail/while_loop.rs",
		"/home/havvy/workspace/clippy/clippy_lints/src/utils/higher.rs",
		"/home/havvy/workspace/clippy/tests/compile-fail/absurd-extreme-comparisons.rs",
		"/home/havvy/.gitignore",
		"/home/havvy/.nixpkgs/rust-nightly.nix",
		"/home/havvy/.nixpkgs/config.nix",
		"/home/havvy/workspace/rust-nightly-nix/README.md",
		"/home/havvy/.ssh/id_rsa.pub"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 154.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"MultipleItem",
			"that",
			"ExistentialPredicate",
			"auto_traits",
			"split_auto_traits",
			"ExistentialPredicat",
			"split_auto_traits",
			"conv_object_ty_poly_trait_ref",
			"keywords",
			"Symbol",
			"empty",
			"test",
			"`cfg",
			"fn replace",
			"BorrowRef",
			"^  - ([^:]+): (.+?)$",
			"  - i8: libcore/num/mod.rs",
			"^\\* \\*",
			"^\\*",
			"\\[(.*?)\\]\\(../../../../(.*?)\\)",
			"\\(../../../../(.*?)\\)",
			"^",
			"src",
			"^([^:]+):(.*)$",
			"start",
			"#\\[lang = \"([a-z_0-9]+)\"\\]",
			"#\\[lang = \"([a-z_]+)\"\\]",
			"eh_personality",
			"copy",
			"mut_ptr",
			"#[lang=",
			"lang=\"",
			"(^.*)#",
			"./build/x86_64-unknown-linux-gnu"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"  - `$1`: `$2`",
			"- -",
			"* *",
			"$1: $2",
			"$1",
			"* ",
			"../../../..",
			"[$2]($1)",
			"$1",
			"#"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/havvy/.nixpkgs/shell/rust.nix",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 832,
						"regions":
						{
						},
						"selection":
						[
							[
								754,
								754
							]
						],
						"settings":
						{
							"syntax": "Packages/Nix/nix.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/havvy/scratchspace/rustc-build-logs/2018-05-25-01.log",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 706851,
						"regions":
						{
						},
						"selection":
						[
							[
								706851,
								706851
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 132607.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/havvy/scratchspace/ty-dynamic.search",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8045,
						"regions":
						{
						},
						"selection":
						[
							[
								3886,
								3886
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/havvy/workspace/rust/project/src/libsyntax_pos/symbol.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21861,
						"regions":
						{
						},
						"selection":
						[
							[
								12488,
								12488
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6601.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/havvy/workspace/rust/project/src/libproc_macro/lib.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53070,
						"regions":
						{
						},
						"selection":
						[
							[
								2241,
								2241
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 589.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/havvy/workspace/rust/project/config.toml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18449,
						"regions":
						{
						},
						"selection":
						[
							[
								12270,
								12270
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 198900.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/havvy/workspace/rust/project/src/librustc_typeck/astconv.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 60852,
						"regions":
						{
						},
						"selection":
						[
							[
								29896,
								29896
							]
						],
						"settings":
						{
							"rulers":
							[
								100
							],
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12271.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/havvy/workspace/rust/project/src/librustc/ty/sty.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 70063,
						"regions":
						{
						},
						"selection":
						[
							[
								18603,
								18603
							]
						],
						"settings":
						{
							"rulers":
							[
								100
							],
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8599.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/havvy/workspace/rust/project/src/libsyntax/diagnostic_list.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9602,
						"regions":
						{
						},
						"selection":
						[
							[
								2481,
								2481
							]
						],
						"settings":
						{
							"rulers":
							[
								80
							],
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1479.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/havvy/workspace/rust/project/src/libsyntax/attr.rs",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 53788,
						"regions":
						{
						},
						"selection":
						[
							[
								22252,
								22252
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/havvy/workspace/rust/project/src/librustc/ty/context.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 104892,
						"regions":
						{
						},
						"selection":
						[
							[
								91602,
								91602
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 44887.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/home/havvy/workspace/rust/project/src/test/run-pass/trait-object-auto-dedup.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1961,
						"regions":
						{
						},
						"selection":
						[
							[
								1961,
								1961
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 94.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/home/havvy/workspace/rust/project/src/test/ui/trait-object-auto-dedup-in-impl.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 895,
						"regions":
						{
						},
						"selection":
						[
							[
								635,
								635
							]
						],
						"settings":
						{
							"rulers":
							[
								100
							],
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/home/havvy/workspace/rust/project/src/test/ui/trait-object-auto-dedup-in-impl.stderr",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 511,
						"regions":
						{
						},
						"selection":
						[
							[
								511,
								511
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 14,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5417,
						"regions":
						{
						},
						"selection":
						[
							[
								4192,
								4192
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1219.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/home/havvy/workspace/rust/project/src/test/ui-fulldeps/invalid-punct-ident-1.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 600,
						"regions":
						{
						},
						"selection":
						[
							[
								600,
								600
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/home/havvy/workspace/rust/project/src/test/ui-fulldeps/auxiliary/invalid-punct-ident.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1144,
						"regions":
						{
						},
						"selection":
						[
							[
								704,
								704
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 54.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "project.sublime-project",
	"replace":
	{
		"height": 104.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 360.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
